version: '3.8'

services:
  # Caddy reverse proxy with SSL termination
  caddy:
    image: caddy:2-alpine
    container_name: caddy-proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
      - /var/log/caddy:/var/log/caddy
    networks:
      - klario-network
    depends_on:
      - klario-app

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: klario-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-klario}
      POSTGRES_USER: ${POSTGRES_USER:-klario_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: ${POSTGRES_HOST_AUTH_METHOD:-scram-sha-256}
      POSTGRES_INITDB_ARGS: ${POSTGRES_INITDB_ARGS:---auth-host=scram-sha-256}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    ports:
      - "127.0.0.1:5432:5432"  # Only accessible from localhost
    networks:
      - klario-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-klario_user} -d ${POSTGRES_DB:-klario}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis for session storage (optional but recommended for production)
  redis:
    image: redis:7-alpine
    container_name: klario-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "127.0.0.1:6379:6379"  # Only accessible from localhost
    networks:
      - klario-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Klario Application
  klario-app:
    image: klario:latest
    container_name: klario-app
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5000
      DATABASE_URL: postgresql://${POSTGRES_USER:-klario_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-klario}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      
      # Session secrets
      SESSION_SECRET: ${SESSION_SECRET}
      
      # Email service secrets
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      SENDGRID_API_KEY: ${SENDGRID_API_KEY}
      SENDGRID_FROM_EMAIL: ${SENDGRID_FROM_EMAIL}
      
      # SMS service secrets
      HELLOSMS_USERNAME: ${HELLOSMS_USERNAME}
      HELLOSMS_PASSWORD: ${HELLOSMS_PASSWORD}
      
      # AI service secrets
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      
      # PostgreSQL connection details (for session store)
      PGHOST: postgres
      PGPORT: 5432
      PGDATABASE: ${POSTGRES_DB:-klario}
      PGUSER: ${POSTGRES_USER:-klario_user}
      PGPASSWORD: ${POSTGRES_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - klario-network
    volumes:
      - app_logs:/app/logs
    healthcheck:
      test: ["CMD", "node", "/app/healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Database backup service (runs daily)
  db-backup:
    image: postgres:15-alpine
    container_name: klario-backup
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-klario}
      POSTGRES_USER: ${POSTGRES_USER:-klario_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      BACKUP_RETENTION_DAYS: ${BACKUP_RETENTION_DAYS:-7}
    volumes:
      - postgres_backups:/backups
      - ./scripts/backup.sh:/usr/local/bin/backup.sh
    networks:
      - klario-network
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      sh -c "
        while true; do
          /usr/local/bin/backup.sh
          sleep 86400
        done
      "

volumes:
  caddy_data:
    driver: local
  caddy_config:
    driver: local
  postgres_data:
    driver: local
  postgres_backups:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local

networks:
  klario-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16