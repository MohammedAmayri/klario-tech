        name: Deploy Klario to Production

        on:
          push:
            branches: [ main, master ]
          pull_request:
            branches: [ main, master ]

        env:
          NODE_VERSION: '20'
          DOCKER_IMAGE_NAME: klario
          DOCKER_TAG: latest
          PROD_HOST: ${{ secrets.DO_HOST }}
          PROD_USER: ${{ secrets.DO_USERNAME }}
          PROD_PORT: ${{ secrets.DO_PORT }}

        jobs:
          test:
            runs-on: ubuntu-latest
            services:
              postgres:
                image: postgres:15
                env:
                  POSTGRES_PASSWORD: postgres
                  POSTGRES_DB: klario_test
                options: >-
                  --health-cmd "pg_isready -U postgres -d klario_test"
                  --health-interval 10s
                  --health-timeout 5s
                  --health-retries 5
                ports:
                  - 5432:5432

            steps:
              - uses: actions/checkout@v4

              - name: Setup Node.js
                uses: actions/setup-node@v4
                with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: npm

              - name: Install dependencies & build
                run: |
                  npm ci
                  NODE_ENV=test \
                  DATABASE_URL=postgresql://postgres:postgres@localhost:5432/klario_test \
                    node scripts/build.js

              - name: Run tests & health check
                run: |
                  npm run check
                  cd dist
                  NODE_ENV=test \
                  DATABASE_URL=postgresql://postgres:postgres@localhost:5432/klario_test \
                  SESSION_SECRET=test_session_secret_for_ci \
                  OPENAI_API_KEY=test_key \
                    node index.js &
                  APP_PID=$!
                  sleep 10
                  curl -f http://localhost/health
                  kill $APP_PID

          build-and-deploy:
            needs: test
            runs-on: ubuntu-latest
            if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

            steps:
              - uses: actions/checkout@v4

              - name: Setup Node.js & build
                uses: actions/setup-node@v4
                with:
                  node-version: ${{ env.NODE_VERSION }}
                run: |
                  npm ci
                  NODE_ENV=production node scripts/build.js

              - name: Build Docker image
                run: docker build -t ${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_TAG }} .

              - name: Generate production .env
                run: |
                  cat > .env <<EOF
                  DOMAIN_NAME=getklario.com
                  SESSION_SECRET=${{ secrets.SESSION_SECRET }}
                  DATABASE_URL=${{ secrets.DATABASE_URL }}
                  REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
                  SENDGRID_API_KEY=${{ secrets.SENDGRID_API_KEY }}
                  SENDGRID_FROM_EMAIL=noreply@getklario.com
                  OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
                  EOF

              - name: Save Docker image tarball
                run: docker save ${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_TAG }} | gzip > klario-app.tar.gz

              - name: Copy deploy artifacts to server
                uses: appleboy/scp-action@v0.1.7
                with:
                  host: ${{ env.PROD_HOST }}
                  username: ${{ env.PROD_USER }}
                  key: ${{ secrets.DO_SSH_KEY }}
                  port: ${{ env.PROD_PORT }}
                  source: |
                    klario-app.tar.gz
                    docker-compose.prod.yml
                    Caddyfile
                    .env
                    scripts/
                  target: /tmp/klario-deploy/

              - name: Deploy on Droplet
                uses: appleboy/ssh-action@v1.0.3
                with:
                  host: ${{ env.PROD_HOST }}
                  username: ${{ env.PROD_USER }}
                  key: ${{ secrets.DO_SSH_KEY }}
                  port: ${{ env.PROD_PORT }}
                  script: |
                    set -e
                    # Prepare deploy dir
                    rm -rf /tmp/klario-deploy && mv /tmp/klario-deploy ~/
                    cd ~/klario-deploy

                    # Load image & copy files
                    docker load < klario-app.tar.gz
                    mkdir -p ~/klario && cp -r * ~/klario/
                    cd ~/klario
                    chmod +x scripts/*.sh

                    # Bring up services
                    docker-compose -f docker-compose.prod.yml pull
                    docker-compose -f docker-compose.prod.yml up -d

                    # 1) App container health
                    echo "== App Container Health =="
                    for i in {1..10}; do
                      if docker-compose exec -T klario-app curl -fsS http://localhost/health; then
                        echo "âœ… App container healthy"; break
                      fi
                      sleep 5
                    done

                    # 2) Proxy/SSL health
                    echo "== Proxy/SSL Health =="
                    for i in {1..10}; do
                      if curl -fsS https://getklario.com/health; then
                        echo "âœ… Proxy & SSL healthy"; break
                      fi
                      sleep 5
                    done

                    echo "ðŸš€ Deployment completed successfully!"

              - name: Cleanup local image tar
                if: always()
                run: rm -f klario-app.tar.gz
