    # docker-compose.yml (base)
    version: '3.8'

    services:
      postgres:
        image: postgres:15-alpine
        container_name: klario-postgres
        restart: unless-stopped
        environment:
          POSTGRES_DB: klario
          POSTGRES_USER: klario_user
          POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        volumes:
          - postgres_data:/var/lib/postgresql/data
          - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
        networks:
          - klario-network
        healthcheck:
          test: ["CMD-SHELL", "pg_isready -U klario_user -d klario"]
          interval: 10s
          timeout: 5s
          retries: 5
          start_period: 30s

      redis:
        image: redis:7-alpine
        container_name: klario-redis
        restart: unless-stopped
        command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
        volumes:
          - redis_data:/data
        networks:
          - klario-network
        healthcheck:
          test: ["CMD", "redis-cli --raw ping"]
          interval: 10s
          timeout: 3s
          retries: 5

      klario-app:
        build: .
        image: yourregistry/klario:${TAG}
        container_name: klario-app
        restart: unless-stopped
        environment:
          NODE_ENV: production
          DATABASE_URL: ${DATABASE_URL}
          REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
          SESSION_SECRET: ${SESSION_SECRET}
          SMTP_HOST: ${SMTP_HOST}
          SMTP_PORT: ${SMTP_PORT}
          SMTP_USER: ${SMTP_USER}
          SMTP_PASS: ${SMTP_PASS}
          SENDGRID_API_KEY: ${SENDGRID_API_KEY}
          SENDGRID_FROM_EMAIL: ${SENDGRID_FROM_EMAIL}
          OPENAI_API_KEY: ${OPENAI_API_KEY}
        networks:
          - klario-network
        volumes:
          - app_logs:/app/logs
        healthcheck:
          test: ["CMD", "node", "/app/healthcheck.js"]
          interval: 30s
          timeout: 10s
          retries: 3
          start_period: 40s

      proxy:
        image: caddy:2-alpine
        container_name: caddy-proxy
        restart: unless-stopped
        ports:
          - "80:80"
          - "443:443"
        volumes:
          - ./Caddyfile:/etc/caddy/Caddyfile:ro
          - caddy_data:/data
          - caddy_config:/config
          - /var/log/caddy:/var/log/caddy
        networks:
          - klario-network
        depends_on:
          - klario-app

    volumes:
      postgres_data:
        driver: local
      redis_data:
        driver: local
      app_logs:
        driver: local
      caddy_data:
        driver: local
      caddy_config:
        driver: local

    networks:
      klario-network:
        driver: bridge
        ipam:
          config:
            - subnet: 172.20.0.0/16
